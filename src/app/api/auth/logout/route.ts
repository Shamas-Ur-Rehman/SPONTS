import { NextRequest, NextResponse } from "next/server";
import { supabaseAdmin } from "@/supabase/supabase-admin";

/**
 * @param API Route pour la d√©connexion utilisateur
 *
 * D√©connexion rapide et efficace avec logs minimaux
 */
export async function POST(request: NextRequest) {
  try {
    console.log("=== D√âBUT API LOGOUT ===");
    console.log("üïê Timestamp:", new Date().toISOString());

    // R√©cup√©rer le token d'autorisation depuis les headers
    const authHeader = request.headers.get("authorization");

    if (!authHeader || !authHeader.startsWith("Bearer ")) {
      console.log("‚ùå Token d'autorisation manquant");
      return NextResponse.json(
        { error: "Token d'autorisation requis" },
        { status: 401 }
      );
    }

    const token = authHeader.substring(7);
    console.log("‚úÖ Token extrait, d√©connexion en cours...");

    // D√©connexion rapide via l'API admin
    const { error: signOutError } = await supabaseAdmin.auth.admin.signOut(
      token
    );

    if (signOutError) {
      console.error("‚ùå Erreur lors de la d√©connexion:", signOutError);
      return NextResponse.json(
        { error: "Erreur lors de la d√©connexion" },
        { status: 500 }
      );
    }

    console.log("‚úÖ D√©connexion r√©ussie");
    console.log("=== SUCC√àS API LOGOUT ===");

    return NextResponse.json({
      success: true,
      message: "D√©connexion r√©ussie",
      logoutTime: new Date().toISOString(),
    });
  } catch (error) {
    console.error("üí• Erreur g√©n√©rale dans l'API logout:", error);

    return NextResponse.json(
      { error: "Erreur interne du serveur lors de la d√©connexion" },
      { status: 500 }
    );
  }
}
