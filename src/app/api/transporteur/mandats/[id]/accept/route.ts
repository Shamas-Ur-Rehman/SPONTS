import { NextRequest, NextResponse } from "next/server";
import { supabaseAdmin } from "../../../../../../../supabase/supabase-admin";
import { supabase } from "../../../../../../../supabase/supabase";

/**
 * @param API Route pour accepter un mandat par un transporteur
 *
 * V√©rifie les autorisations et assigne le mandat au transporteur de mani√®re atomique
 */
export async function POST(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    console.log("=== D√âBUT API ACCEPT MANDAT TRANSPORTEUR ===");

    const { id } = await params;
    console.log("Mandat ID:", id);

    const mandatId = parseInt(id);
    if (isNaN(mandatId)) {
      return NextResponse.json(
        { error: "ID de mandat invalide" },
        { status: 400 }
      );
    }

    // R√©cup√©rer l'utilisateur depuis les headers (middleware auth)
    const authHeader = request.headers.get("authorization");
    if (!authHeader || !authHeader.startsWith("Bearer ")) {
      return NextResponse.json(
        { error: "Token d'authentification requis" },
        { status: 401 }
      );
    }

    const token = authHeader.replace("Bearer ", "");

    // V√©rifier l'utilisateur
    const {
      data: { user },
      error: authError,
    } = await supabase.auth.getUser(token);
    if (authError || !user) {
      console.error("‚ùå Erreur authentification:", authError);
      return NextResponse.json(
        { error: "Utilisateur non authentifi√©" },
        { status: 401 }
      );
    }

    console.log("Utilisateur authentifi√©:", user.id);

    // V√©rifier que l'utilisateur est membre d'une entreprise transporteur
    const { data: membership, error: membershipError } = await supabaseAdmin
      .from("company_members")
      .select(
        `
        company_id,
        company:companies(type, status)
      `
      )
      .eq("user_id", user.id)
      .single();

    if (membershipError || !membership) {
      console.error("‚ùå Utilisateur non membre d'entreprise:", membershipError);
      return NextResponse.json(
        { error: "Vous devez √™tre membre d'une entreprise transporteur" },
        { status: 403 }
      );
    }

    const company = membership.company as any;
    if (company.type !== "transporteur") {
      console.error("‚ùå Entreprise non transporteur:", company.type);
      return NextResponse.json(
        { error: "Votre entreprise doit √™tre de type transporteur" },
        { status: 403 }
      );
    }

    if (company.status !== "approved") {
      console.error("‚ùå Entreprise non approuv√©e:", company.status);
      return NextResponse.json(
        {
          error:
            "Votre entreprise doit √™tre approuv√©e pour accepter des mandats",
        },
        { status: 403 }
      );
    }

    console.log("‚úÖ V√©rifications d'autorisation pass√©es");

    // V√©rifier que le mandat existe et est disponible
    const { data: mandat, error: mandatError } = await supabaseAdmin
      .from("mandats")
      .select("*")
      .eq("id", mandatId)
      .eq("status", "approved")
      .is("transporteur_company_id", null)
      .single();

    if (mandatError || !mandat) {
      if (mandatError?.code === "PGRST116") {
        console.error("‚ùå Mandat non trouv√© ou d√©j√† assign√©");
        return NextResponse.json(
          { error: "Mandat non trouv√© ou d√©j√† assign√© √† un transporteur" },
          { status: 404 }
        );
      }
      console.error("‚ùå Erreur r√©cup√©ration mandat:", mandatError);
      return NextResponse.json(
        { error: "Erreur lors de la r√©cup√©ration du mandat" },
        { status: 500 }
      );
    }

    console.log("‚úÖ Mandat disponible trouv√©");

    // Mise √† jour atomique du mandat
    const { data: updatedMandat, error: updateError } = await supabaseAdmin
      .from("mandats")
      .update({
        transporteur_company_id: membership.company_id,
        transporteur_company_user: user.id,
        transporteur_status: "accepted",
        updated_at: new Date().toISOString(),
      })
      .eq("id", mandatId)
      .eq("status", "approved")
      .is("transporteur_company_id", null)
      .select()
      .single();

    if (updateError) {
      console.error("‚ùå Erreur mise √† jour mandat:", updateError);
      return NextResponse.json(
        { error: "Erreur lors de l'acceptation du mandat" },
        { status: 500 }
      );
    }

    if (!updatedMandat) {
      console.error("‚ùå Mandat non mis √† jour (concurrence)");
      return NextResponse.json(
        { error: "Le mandat a d√©j√† √©t√© accept√© par un autre transporteur" },
        { status: 409 }
      );
    }

    console.log("‚úÖ Mandat accept√© avec succ√®s");

    console.log("=== SUCC√àS API ACCEPT MANDAT TRANSPORTEUR ===");
    return NextResponse.json({
      success: true,
      mandat: updatedMandat,
      message: "Mandat accept√© avec succ√®s",
    });
  } catch (error) {
    console.error("üí• Erreur g√©n√©rale dans l'API accept mandat:", error);
    return NextResponse.json(
      { error: "Erreur interne du serveur" },
      { status: 500 }
    );
  }
}
