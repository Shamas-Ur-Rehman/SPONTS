import { NextRequest, NextResponse } from "next/server";
import { supabaseAdmin } from "../../../../../../../supabase/supabase-admin";
import { supabase } from "../../../../../../../supabase/supabase";
import { TransporteurStatus } from "@/types/mandat";

/**
 * @param API Route pour mettre √† jour le statut d'un mandat par le transporteur
 *
 * Permet au transporteur de changer le statut d'un mandat qu'il a accept√©
 */
export async function PATCH(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    console.log("=== D√âBUT API UPDATE STATUS TRANSPORTEUR ===");

    const { id } = await params;
    console.log("Mandat ID:", id);

    const mandatId = parseInt(id);
    if (isNaN(mandatId)) {
      return NextResponse.json(
        { error: "ID de mandat invalide" },
        { status: 400 }
      );
    }

    // R√©cup√©rer le nouveau statut depuis le body
    const { status } = await request.json();

    // Validation du statut
    const validStatuses: TransporteurStatus[] = [
      "accepted",
      "picked_up",
      "delivered",
      "delivery_problem",
    ];
    if (!validStatuses.includes(status)) {
      return NextResponse.json(
        {
          error:
            "Statut invalide. Statuts autoris√©s: accepted, picked_up, delivered, delivery_problem",
        },
        { status: 400 }
      );
    }

    // R√©cup√©rer l'utilisateur depuis les headers (middleware auth)
    const authHeader = request.headers.get("authorization");
    if (!authHeader || !authHeader.startsWith("Bearer ")) {
      return NextResponse.json(
        { error: "Token d'authentification requis" },
        { status: 401 }
      );
    }

    const token = authHeader.replace("Bearer ", "");

    // V√©rifier l'utilisateur
    const {
      data: { user },
      error: authError,
    } = await supabase.auth.getUser(token);
    if (authError || !user) {
      console.error("‚ùå Erreur authentification:", authError);
      return NextResponse.json(
        { error: "Utilisateur non authentifi√©" },
        { status: 401 }
      );
    }

    console.log("Utilisateur authentifi√©:", user.id);

    // V√©rifier que l'utilisateur est membre de l'entreprise transporteur assign√©e au mandat
    const { data: mandat, error: mandatError } = await supabaseAdmin
      .from("mandats")
      .select(
        `
        *,
        transporteur_company:companies!mandats_transporteur_company_id_fkey(id, type)
      `
      )
      .eq("id", mandatId)
      .not("transporteur_company_id", "is", null)
      .single();

    if (mandatError || !mandat) {
      console.error("‚ùå Mandat non trouv√© ou non assign√©:", mandatError);
      return NextResponse.json(
        { error: "Mandat non trouv√© ou non assign√© √† un transporteur" },
        { status: 404 }
      );
    }

    // V√©rifier que l'utilisateur est membre de l'entreprise transporteur
    const { data: membership, error: membershipError } = await supabaseAdmin
      .from("company_members")
      .select("company_id")
      .eq("user_id", user.id)
      .eq("company_id", mandat.transporteur_company_id)
      .single();

    if (membershipError || !membership) {
      console.error(
        "‚ùå Utilisateur non autoris√© √† modifier ce mandat:",
        membershipError
      );
      return NextResponse.json(
        { error: "Vous n'√™tes pas autoris√© √† modifier ce mandat" },
        { status: 403 }
      );
    }

    console.log("‚úÖ V√©rifications d'autorisation pass√©es");

    // Mise √† jour du statut
    const { data: updatedMandat, error: updateError } = await supabaseAdmin
      .from("mandats")
      .update({
        transporteur_status: status,
        updated_at: new Date().toISOString(),
      })
      .eq("id", mandatId)
      .eq("transporteur_company_id", membership.company_id)
      .select()
      .single();

    if (updateError) {
      console.error("‚ùå Erreur mise √† jour statut:", updateError);
      return NextResponse.json(
        { error: "Erreur lors de la mise √† jour du statut" },
        { status: 500 }
      );
    }

    if (!updatedMandat) {
      console.error("‚ùå Mandat non mis √† jour");
      return NextResponse.json(
        { error: "Erreur lors de la mise √† jour du statut" },
        { status: 500 }
      );
    }

    console.log("‚úÖ Statut mis √† jour avec succ√®s:", status);

    console.log("=== SUCC√àS API UPDATE STATUS TRANSPORTEUR ===");
    return NextResponse.json({
      success: true,
      mandat: updatedMandat,
      message: `Statut mis √† jour vers ${status}`,
    });
  } catch (error) {
    console.error("üí• Erreur g√©n√©rale dans l'API update status:", error);
    return NextResponse.json(
      { error: "Erreur interne du serveur" },
      { status: 500 }
    );
  }
}
